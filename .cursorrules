# Speed - Cursor Rules

## Overview

Speed is a minimal macOS task management app with a unique "Speed Mode" feature for focused task completion.

## Meta Rules

- This .cursorrules file must be updated whenever:
  - New features are added
  - Existing features are modified
  - Requirements are changed
  - Behavior rules are adjusted
  - Visual states are altered
  - UI elements are modified
  - Release processes are changed
  - Version management is updated

## Development Rules

- Do not run terminal commands to open the app in Xcode
- The app should be run directly from Xcode for testing

## Release Management

### Version Control

- Version numbers follow semantic versioning (MAJOR.MINOR.PATCH)
- Version numbers must be consistent across:
  - create_release.sh (VERSION variable)
  - Xcode project settings
  - project.pbxproj (MARKETING_VERSION)
  - appcast.xml entries
- Version increments:
  - PATCH: Bug fixes and minor improvements
  - MINOR: New features (backward compatible)
  - MAJOR: Breaking changes or significant updates

### Release Automation

- Release process is automated via GitHub Actions
- Version bumping is handled by bump_version.sh:
  - -p or no flag: Patch version bump
  - -m: Minor version bump
  - -M: Major version bump
  - -v X.Y.Z: Specific version
- Release artifacts:
  - Signed app bundle (.app)
  - ZIP archive
  - GitHub release
  - Updated appcast.xml
  - Sparkle signature

### Release Requirements

- All changes must be committed and pushed
- Version numbers must be consistent
- Release notes must be prepared
- Previous version must support auto-update
- Tests must pass
- Documentation must be updated

## Core Features

### Task Management

- Task Object Structure:
  - `id`: UUID (Unique identifier)
  - `title`: String (Task description)
  - `isCompleted`: Bool (Completion status)
  - `completedAt`: Date? (Timestamp of completion, optional)
  - `isFrog`: Bool (Whether the task is the current "frog", default false)
  - `priority`: Int (Task priority from 1 to 5, default 1)
- Add tasks by typing and pressing Enter
- Add multiple tasks by pasting text:
  - Each line becomes a separate task
  - Common list prefixes are automatically removed:
    - Markdown list markers (-, \*, +)
    - Checkbox markers ([ ], [x], etc.)
    - Numbered list markers (1., 2., etc.)
    - Things app format ([ ] MM/DD/YYYY)
  - Empty lines are ignored
  - Paste operation is treated as a single undo/redo action
- Mark tasks as complete by clicking the circle icon
  - Circle icon shows pointer cursor on hover
  - Circle changes from gray to green on hover
  - Clicking marks task as complete
- Tasks show as gray and strikethrough when completed
- Tasks can be edited by double-clicking
- Tasks can be selected by clicking
- Tasks show visual feedback on hover and selection
- Completed tasks are hidden but preserved in storage
- Tasks persist between app launches and window reopens
- Full undo/redo support for all task operations
- Tasks have a priority field (integer 1-5, default 1)

### Quick Add Modal

- Triggered by global Command + Option + N shortcut from any app
- Command K-style modal appears above all other apps
- Dark gray blurred background
- 10px rounded corners
- Fixed size of 400x100
- Centered on screen
- White text on dark background
- Text field automatically focused for immediate typing
- Priority selection:
  - Below text field, a row of 5 buttons (1-5) appears
  - Buttons are square, full-width, in a container with slight background and rounded corners
  - Pressing Tab from text field moves focus to priority buttons
  - Pressing Shift+Tab from priority buttons moves focus back to text field
  - Left/Right arrow keys select priority when buttons are focused
  - Clicking a priority button selects it
  - Default priority is 1
- Submit task by pressing Enter (includes selected priority)
- Auto-close on submission
- Press Escape to cancel and close
- Draggable from anywhere in the window
- Floating window level (stays above other windows)

### Task Selection and Movement

- Single click: Selects a single task
- Command+click: Toggles task selection (add/remove from selection)
- Shift+click: Selects range of tasks between last selected and clicked task
- Multiple selected tasks:
  - Show 10% white background on all selected tasks
  - Can be deleted together with Delete key
  - Can be moved together:
    - Command+up/down: Move selection one position
    - Command+option+up: Move selection to top
    - Command+option+down: Move selection to bottom
  - Maintain relative order when moving
- Selection states:
  - Selected tasks show 10% white background
  - Hover shows 5% white background
  - States are mutually exclusive with editing
  - Clicking input field clears selection

### Task Interactions

- Entire task row is clickable for selection
- Checkbox and frog buttons maintain separate click areas
- Double click anywhere on row (except buttons) to edit
- Hover effects:
  - Entire row shows pointer cursor
  - Buttons show their own pointer cursors
  - Background highlight covers entire row
  - 6px rounded corners on hover/selection states

### Frog Task Feature

- Only one incomplete task can be marked as "frog" at a time
- Frog tasks are pinned to the top of the list
- Frog tasks are styled with:
  - Bold text
  - #8CFF00 text color
  - Frog emoji (üê∏)
- Frog emoji interaction:
  - Appears at 10% opacity when hovering over any task
  - Shows 50% opacity when hovering over the emoji itself
  - Shows 70% opacity when hovering over an active frog's emoji
  - Shows 100% opacity for active frog task
  - Cursor changes to pointer when hovering over emoji
  - Clicking toggles frog status
- In Speed Mode:
  - Frog emoji appears before task text
  - Task inherits frog styling (bold, #8CFF00)
- Task reordering animates smoothly when frog status changes
- Completed tasks retain their frog status
- Marking a task as frog removes frog status from other incomplete tasks

### Window Modes

#### List Mode (400x400)

- Full task list view (showing only uncompleted tasks)
- Black background with white text
- Standard window controls
- Centered on screen by default
- Resizable with minimum size of 400x400
- Always starts in this mode when app opens
- Window position and size persist between launches

#### Speed Mode (300x50)

- Triggered by bolt button or global Option + Command + Enter shortcut (disabled when no tasks exist)
- Shows only the current (first uncompleted) task
- Window properties:
  - Fixed size: 300x50
  - Frameless window (no title bar or controls)
  - 5px rounded corners
  - Black background
  - Floats above other windows
  - Fully draggable from anywhere
  - Remembers last position between toggles and app launches
  - Default position: centered horizontally, 50px from bottom
- Task display:
  - Task text centered by default
  - Task text uses 16pt medium font (2pt larger than list mode)
  - Controls hidden by default
  - On hover: task text hides, controls appear centered
  - Automatically exits when all tasks are completed

### UI Elements

#### Task Input

- Single text field for task entry
- White text on dark background
- Submit via Enter key only
- Clears after submission
- Light gray (30% white) 2px bottom border with 8px padding
- 14px left padding to align with task text
- Auto-focuses when:
  - App launches
  - Returning to List Mode from Speed Mode

#### Task List

- Black background
- White text for active tasks
- Gray text for completed tasks
- Green checkmark for completed tasks
- Gray circle for incomplete tasks
- No separators between tasks (black dividers only visible during drag)
- Rounded corners on hover/selection states
- 6px vertical padding on each task
- Only shows uncompleted tasks

#### Speed Button

- Full width
- White background with black bolt icon
- 14pt bold font
- 10px rounded corners
- Disabled when task list is empty
- Cursor changes to pointing hand on hover

#### Speed Mode Controls

- Green checkmark button to complete current task
- Red X button to exit Speed mode
- Controls appear centered on hover
- Smooth fade transition between task text and controls
- "All tasks completed!" message when no tasks remain

#### Quick Add Modal

- Fixed size: 400x100
- Dark gray blurred background
- White text in text field
- 10px rounded corners
- Auto-focused text field with 24pt medium font
- No window controls
- Draggable from anywhere
- Priority buttons (1-5) displayed below text field

## Behavior Rules

### Window Management

- Window position and size are preserved between launches
- Window position is preserved in Speed Mode
- Returns to center in List Mode if no saved position
- Smooth spring animation between modes
- Window level changes to float in Speed Mode
- UI elements fade in after window animation completes (0.15s delay)
- Quick Add modal appears centered by default
- Quick Add modal floats above all other windows
- Quick Add modal does not activate the main app window

### Task Handling

- Tasks are completed in order (first uncompleted task is current)
- Completing the current task in Speed Mode shows the next task
- Empty task submissions are ignored
- Task additions are animated
- Task selection moves to next task after deletion
- Task editing and selection states are mutually exclusive
- Completing last task in Speed Mode automatically exits to List Mode
- Tasks persist in UserDefaults between app launches
- Completed tasks are stored with completion timestamps
- Tasks cannot be uncompleted once marked complete
- All task operations support undo/redo:
  - Adding tasks
  - Completing tasks
  - Editing task text
  - Deleting tasks
  - Reordering tasks
  - Changing priority via Quick Add

### Global Shortcuts

- Option + Command + Enter: Toggle Speed Mode (when tasks exist)
- Option + Command + N: Show Quick Add modal from any app

### Visual States

- Tasks show immediate visual feedback when completed
- Window transitions use spring animation
- Hover states use subtle white backgrounds
- Selection states use slightly stronger white backgrounds
- List supports drag-to-reorder visual feedback
- Mode transitions smoothly fade between states

# Cursor rules

.gitignore
.DS*Store
*.xcuserstate
xcuserdata/
DerivedData/
\_.xcworkspace/xcuserdata/\*

// Cursor Rules
// Format: selector -> cursor
// Available cursors: default, text, pointer, crosshair, move, grab, grabbing, ew-resize, ns-resize, nesw-resize, nwse-resize, zoom-in, zoom-out, not-allowed

// Buttons and interactive elements
button -> pointer
[role="button"] -> pointer
.clickable -> pointer
üê∏ -> pointer

// Text input and selection
input -> text
textarea -> text
[contenteditable] -> text

List Mode:

- Minimum window size: 300x400
- Resizable: Yes
- Movable: Yes
- Level: Normal

Speed Mode:

- Minimum window size: 222x35
- Resizable: Yes
- Movable: Yes
- Level: Floating (always on top)
- Rounded corners: 10px
- Background: Black
